#!/usr/bin/env python3
"""
Script top_monde_ranking pour analyser et enrichir les fichiers CSV TOP MONDE
"""

import pandas as pd
import os
import numpy as np


def top_monde_ranking():
    """Analyser et enrichir les fichiers CSV TOP MONDE avec de nouvelles colonnes calcul√©es"""

    # Chemin des dossiers
    waiting_room_path = os.path.join("data", "waiting_room")
    ready_to_use_path = os.path.join("data", "ready_to_use")

    # Cr√©er le dossier ready_to_use s'il n'existe pas
    os.makedirs(ready_to_use_path, exist_ok=True)

    # Chercher tous les fichiers TOP MONDE dans waiting_room
    import glob

    pattern = os.path.join(waiting_room_path, "TOP MONDE*.csv")
    csv_files = glob.glob(pattern)

    if not csv_files:
        print("‚ùå Aucun fichier CSV 'TOP MONDE' trouv√© dans waiting_room")
        return False

    print(f"üìÅ {len(csv_files)} fichier(s) TOP MONDE trouv√©(s) :")
    for file in csv_files:
        print(f"  - {os.path.basename(file)}")

    processed_count = 0
    for input_file in csv_files:
        filename = os.path.basename(input_file)
        output_filename = filename.replace(".csv", "_enhanced.csv")
        output_file = os.path.join(ready_to_use_path, output_filename)

        # V√©rifier si le fichier enhanced existe d√©j√†
        if os.path.exists(output_file):
            print(f"\n‚ö†Ô∏è  Le fichier enhanced existe d√©j√† : {output_filename}")
            print("üîÑ Aucune action n√©cessaire - le fichier est d√©j√† trait√©.")
            processed_count += 1
            continue

        print(f"\nüìÇ Traitement du fichier : {filename}")

        try:
            # Lire le fichier CSV
            df = pd.read_csv(input_file)
            print(
                f"üìä Donn√©es charg√©es : {df.shape[0]} lignes √ó {df.shape[1]} colonnes"
            )

            # Cr√©er les nouvelles colonnes

            # 1. perf_sum : somme des performances 1 an + 6 mois + 3 mois
            perf_columns = [
                "Performance % 1 ann√©e",
                "Performance % 6 mois",
                "Performance % 3 mois",
            ]
            df["perf_sum"] = df[perf_columns].sum(axis=1)
            print("‚úÖ Colonne 'perf_sum' cr√©√©e")

            # 1bis. perf_norm : 1 + perf_sum/1000
            df["perf_norm"] = 1 + df["perf_sum"] / 1000
            print("‚úÖ Colonne 'perf_norm' cr√©√©e")

            # 2. MRAT : moyenne mobile 21 / moyenne mobile 200
            df["MRAT"] = (
                df["Moyenne mobile simple (21) 1 jour"]
                / df["Moyenne mobile simple (200) 1 jour"]
            )
            print("‚úÖ Colonne 'MRAT' cr√©√©e")

            # 3. Diff : prix / moyenne mobile 200
            df["Diff"] = df["Prix"] / df["Moyenne mobile simple (200) 1 jour"]
            print("‚úÖ Colonne 'Diff' cr√©√©e")

            # 4. score : somme de perf_norm et MRAT
            df["score"] = df["perf_norm"] + df["MRAT"]
            print("‚úÖ Colonne 'score' cr√©√©e")

            # Remplir les valeurs nulles des colonnes calcul√©es par 0
            calculated_columns = ["perf_sum", "perf_norm", "MRAT", "Diff", "score"]
            df[calculated_columns] = df[calculated_columns].fillna(0)
            print("‚úÖ Valeurs nulles des colonnes calcul√©es remplac√©es par 0")

            # Arrondir toutes les valeurs num√©riques du DataFrame
            numeric_columns = df.select_dtypes(include=[np.number]).columns
            df[numeric_columns] = df[numeric_columns].round(2)
            print("‚úÖ Toutes les valeurs num√©riques arrondies √† 2 d√©cimales")

            # Trier le DataFrame par score d√©croissant
            df = df.sort_values(by="score", ascending=False)
            print("‚úÖ Donn√©es tri√©es par score d√©croissant")

            # Sauvegarder le fichier avec les nouvelles colonnes
            df.to_csv(output_file, index=False)
            print(f"üíæ Fichier sauvegard√© : {output_filename}")

            # Afficher un r√©sum√© pour ce fichier
            print(f"üìà R√©sum√© pour {filename}:")
            print(f"  - perf_sum - Moyenne: {df['perf_sum'].mean():.2f}%")
            print(f"  - MRAT - Moyenne: {df['MRAT'].mean():.4f}")
            print(f"  - Diff - Moyenne: {df['Diff'].mean():.4f}")
            print(f"  - score - Moyenne: {df['score'].mean():.4f}")

            processed_count += 1

        except Exception as e:
            print(f"‚ùå Erreur lors du traitement de {filename}: {e}")
            continue

    # R√©sum√© final
    print(f"\nüéâ TRAITEMENT TERMIN√â !")
    print(f"üìä {processed_count} fichier(s) trait√©(s) sur {len(csv_files)} trouv√©(s)")

    return True


if __name__ == "__main__":
    print("üöÄ D√©marrage de top_monde_ranking...")
    success = top_monde_ranking()
    if success:
        print("\n‚úÖ Analyse TOP MONDE termin√©e avec succ√®s !")
    else:
        print("\n‚ùå √âchec de l'analyse.")
